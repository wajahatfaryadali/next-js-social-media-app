// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  password  String?
  clerkID   String   @unique
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts Post[]

  likes    Like[]
  comments Comment[]

  followers Follow[] @relation("following") // users who follow this user
  following Follow[] @relation("follower") // users this user follows

  notifications        Notification[] @relation("userNotifications") // notifications received by a user
  notificationsCreated Notification[] @relation("notificationCreator") // notifications triggered by a user
}

model Post {
  id        String   @id @default(cuid())
  authorID  String
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  author        User           @relation(fields: [authorID], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id       String @id @default(cuid())
  content  String
  postID   String
  authorID String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  author        User           @relation(fields: [authorID], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postID], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorID, postID]) // composite index for faster queries, : it can speed up the query and we can filter comemnts using these keys 
}

model Like {
  id        String   @id @default(cuid())
  userID    String
  postID    String
  createdAt DateTime @default(now())

  // relations
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postID], references: [id], onDelete: Cascade)

  @@unique([userID, postID]) // same user cannot like twice
  @@index([userID, postID]) // composite index for faster queries
}

model Follow {
  followerID  String
  followingID String
  createdAt   DateTime @default(now())

  // relations
  follower  User @relation("follower", fields: [followerID], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingID], references: [id], onDelete: Cascade)

  @@id([followingID, followerID]) // composite primary key prevents duplicate follows
  @@index([followingID, followerID]) // composite index for faster queries
}

enum NotificationTypeEnum {
  LIKE
  COMMENT
  FOLLOW
}

model Notification {
  id        String               @id @default(cuid())
  userID    String
  creatorID String
  type      NotificationTypeEnum
  read      Boolean              @default(false)
  postID    String?
  commentID String?
  createdAt DateTime             @default(now())

  // relations
  user    User     @relation("userNotifications", fields: [userID], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorID], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postID], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentID], references: [id], onDelete: Cascade)

  @@index([userID, createdAt])
}
